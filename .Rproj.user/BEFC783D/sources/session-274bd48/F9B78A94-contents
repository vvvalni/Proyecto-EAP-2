---
title: "RESUMEN"
output: html_document
date: "2023-10-06"
---

```{r}
rm(list = ls())
```

### ***REGRESIÓN GAUSSIANA***

```{r}
library(rio)
data2 = import ("dataPractice.xlsx")
names(data2)
str(data2)
```

```{r}
library(magrittr)
library(knitr)
library(modelsummary)
```

HIPÓTESIS: menos nivel de educación, más veces en carcel

```{r}
modelo1=formula(vecesEnCarcel~nivelEduca)
```

```{r}
reg1=lm(modelo1,data=data2)
summary(reg1)
```

#### **interpretacion**

-El nivel de educación es significativo al 0.001. Además es una varibale inversa, es decir, a menos nivel de educación, se pasa mas veces en cárcel. Cada vez que las veces en carcel aumentan en 1, el nivel de educación disminuye en promedio 0.6.

```{r}
modelo2=formula(vecesEnCarcel~nivelEduca+esNegro)
```

```{r}
reg2=lm(modelo2,data=data2)
summary(reg2)
```

**interpretacion**

-El nivel de educación es significativo al 0.001.

-La variable es negro no es significativa

```{r}
tanova=anova(reg1,reg2)

kable(tanova,
      caption = "Tabla ANOVA para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
```

Se debe elegir el segundo modelo

### ***REGRESION POISSON***

Hipótesis: Ser negro y el nivel educativo están relacionadas la cantidad de veces en la carcel; controlando por la edad.

```{r}
#crear hipótesis 
h1=formula(vecesEnCarcel~esNegro + nivelEduca+edad )
```

```{r}
#hacer la regresión 
rp1=glm(h1, data = data2, 
        family = poisson(link = "log"))
summary(rp1)
```

Luego de hacer esto, es necesario exponenciar para poder interpretar --- SIEMPRE EXPONENCIAR

```{r}
rp1$coefficients #esto primero
exp(rp1$coefficients) ##esto para exponenciar!!
```

#### **interpretacion**

Es Negro es una variable explicativa al 0.05 y es positiva es decir, cada vez que veces en cárcel aumenta en 1, esta disminuye en promedio, 0.17

Nivel de Educación es una variable explicativa al 0.0001 tambien es positiva, cada vez que veces en carcel aumenta en 1, esta disminuye en promedio, 0.19

Edad es una variable de control

#### **cuando hay exposure:**

```{r}
rp2=glm(h1, data = data2, 
        offset=log(edad), #exposure - variable de control
        family = poisson(link = "log"))
summary(rp2)
```

#### **dato importante - para poisson, logistica y cox**

-si es que el valor está por debajo de 1, se resta 1 y se considera que disminuye.

-si es que el valor está por encima de 1, se resta 1 y se considera que aumenta.

#### *EQUIDISPERCIÓN*

Uno de los supuestos en la Regresión Poisson es que la media y la varianza sean iguales.

cuando hay sobre dispersión se puede usar quassi o binomial

si hay sub dispersión se puede usar binomial

```{r}
overdispersion=AER::dispersiontest(rp1,alternative='greater')$ p.value<0.05
underdispersion=AER::dispersiontest(rp1,alternative='less')$ p.value<0.05
# tabla
testResult=as.data.frame(rbind(overdispersion,underdispersion))
names(testResult)='Es probable?'
testResult%>%kable(caption = "Test de Equidispersión")%>%kableExtra::kable_styling()
```

En este caso hay sobredispersión: hay sobredispersión cuando la varianza es mayor a la media

Subdispersión: cuando la varianza es menor a la media

#### **QUASI POISSON**

Esta se usa si es que hay sobre dispersión

```{r}
rqp = glm(h1, data = data2,
          family = quasipoisson(link = "log"))

modelsPQP=list('POISSON'=rp1,'QUASIPOISSON'=rqp)

summary(rqp)

```

```{r}
rqp$coefficients #esto primero
exp(rqp$coefficients) ##esto para exponenciar!!
```

este es el quassi poisson exponenciado - desde aca se puede interpretar

```{r}
#este código nos dice los erróres típicos, los cuales son distintos dependiendo del modelo
library(arm)
cbind(se_Poi=se.coef(rp1),se_QuasiPoi=se.coef(rqp))
```

La regresión quasipoisson lidia con la sobredispersión al recalcular los errores típicos, lo que afectaría la significancia de los predictores; de ahí que calcula nuevos intervalos de confianza:

#### **BINOMIAL NEGATIVA**

```{r}
library(MASS)
rbn=glm.nb(h1,data=data2)
summary(rbn)
```

ahora hay que exponenciarla

```{r}
rbn$coefficients #esto primero
exp(rbn$coefficients) ##esto para exponenciar!!
```

#### **COMPARACIÓN DE MODELOS**

```{r}
anova(rp1,rqp, rbn, test = "Chisq") %>%
kable(caption = "Tabla ANOVA para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
```

El error se reduce muhco con la binomial negativa, por lo tanto ese es el mejor modelo

### ***REGRESSIÓN LOGISTICA***

#### **IDEAS CLAVE**

-   La probabilidad: Es una medida que señala que tan posible es que ocurra un fenómeno o evento. Oscila entre 0 y 1. Cuanto más cerca de 0 menos probabilidad, y cuanto más cerca del 1 indica más probabilidad. Ejemplo: la probabilidad de ganar en un partido de futbol.

-   Odds: Es la probabilidad de que suceda un evento dividido por la probabilidad de que no suceda. Oscilan entre 0 e infinito y se pueden calcular para la ocurrencia del evento como para la no ocurrencia del evento. Ejemplo: la probabilidad de ganar una apuesta en un partido de futbol es 1.5 veces más probable que perder

-   ODDs Ratio: Es la razón entre dos odds. Permite comparar los odds de un evento en dos grupos Va de 0 a infinito. Los modelos de regresión logística están basados en probabilidades entre dos variables. Por esta razón, es útil conocer los ODDs ratio. Ejemplo: Ganar en una apuesta de un partido de futbol es 5 veces más probable que el ganar en una apuesta de voley

-   La regresión logística modela el comportamiento de la probabilidad del evento de interés. Es un tipo de análisis de regresión utilizado para predecir el resultado de una variable categórica (dependiente) en función de las variables predictoras (independientes). Es útil para modelar la probabilidad de que ocurra un evento en función del efecto de un conjunto de variables.

-   La idea es que la regresión logística aproxime la probabilidad de obtener "0" (no ocurre cierto suceso) o "1" (ocurre el suceso) con el valor de la variable explicativa x.

HIPOTESIS: si tuvo apoyo de dinero, estara mas semanas libre

#### **PROBABILIDADES Y ODDS**

se acostumbra que la variable independiente se sitúe en columnas, y la variable dependiente en filas

```{r}
#relacion entre semanas de libertad y veces en carcel
dep=data2$vecesEnCarcel # a la fila
ind=data2$esNegro # a la columna

libTable=table(dep,ind,dnn = c('veces en carcel','semanas libre'))

### suma por fila y columna
addmargins(libTable)%>%
    kable(caption = "Tabla de Contingencia: 'semanas libre' y 'veces en carcel'")%>%
    kableExtra::kable_styling(full_width = F)

```

ser negro está relacionado con estar más veces en la cárcel

```{r}
ProbNeg=libTable[2,1]/sum(libTable[,1])
MASS::fractions(ProbNeg)
```

```{r}
ProbNeg
```

esta es la probabilidad

```{r}
OddsNeg=libTable[2,1]/libTable[1,1]
MASS::fractions(OddsNeg)

```

```{r}
#planteamos la hipótesis
#set.seed(2019) - usar cuando nos lo indiquen

h2=formula(tuvoApoyoDinero~vecesEnCarcel)

rlog1=glm(h2, data=data2,family = binomial)
summary(rlog1)
```

no es significativa

#### COMPARACIÓN DE MODELOS

\*No se olviden de sacar el \#

```{r}
#library(lmtest)

#lrtest(rlog1,rlog2, rlog3) %>%
#kable(caption = "Tabla LRT para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE) 
```

### ***REGRESSIÓN COX***

El objetivo de la regresión Cox es evaluar los impactos de diferentes variables sobre la "sobrevivencia". Es decir, nos ayuda a saber si ciertos factores influecian la tasa de ocurrencia de un evento en específico en un lapso de tiempo.

```{r}
library(survival)
library(survminer)
```

```{r}
# note que necesito el factor como numérico
data2$survival=with(data2,Surv(time = enLibertad,event =  as.numeric(evento)))
# que es:
library(magrittr) # needed for pipe %>% 
data2%>%
    rmarkdown::paged_table()
```

HIPOTESIS: El tiempo que permanece en libertad un exreo hasta que vuelve a la carcel está afectado si tuvo ahorros,por su nivel educativo, su experiecia laboral previa y por sus encarcelamientos previos.

```{r}
COX1= formula(survival~nivelEduca+AhorrosDiaFuera+expLaboralPrevia+esNegro+vecesEnCarcel)

rcox1 <- coxph(COX1,data=data2)
summary(rcox1)
```

hay que exponenciar estos valores

```{r}
rcox1$coefficients #esto primero
exp(rcox1$coefficients) ##esto para exponenciar!!
```

ahorros es significativa al 0.001 y es positiva. por cada 1 que aumente semanas libre, esta aumenta en promedio 0.009 experiencia laboral es significativa al 0.01 y es negativa. por cada 1 que aumente semanas libre, esta disminuye en promedio 0.44 es negro no es significativa veces en carcel essignnificativa al 0.05 y es positiva. por cada 1 que aumente semanas libre, este aumenta en promedio 0.6

```{r}
COX2= formula(survival~tuvoApoyoDinero+vecesEnCarcel)
rcox2 <- coxph(COX2,data=data2)
summary(rcox2)
```

```{r}
rcox2$coefficients #esto primero
exp(rcox2$coefficients) ##esto para exponenciar!!
```

interpretar...

#### **comparacion**

si es que hay que hacer comparación de modelos

```{r}
anova(rcox2,rcox1)%>%
knitr::kable(caption = "Tabla anova para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
```

### LIMPIEZA DE DATOS

#### Para eliminar espacios en blanco:

Vamos a utilizar el comando trimws(), que elimina espacios en blanco antes y despues de texto:

```{r}
#urban$COUNTRY =trimws(urban$COUNTRY,which=c("right"),whitespace = "[\\h\\v]")
```

#### Separar datos en columnas

"\\d": Recoge todos los casos por separado que R reconoce como números. No reconoce palabras ni símbolos de porcentaje. "\\d"+: Recoge números adyacentes. \\d+\\.\\d: Recoge los casos con decimales \\d+\\.\\d\\%: Recoge decimales y también porcentajes. \\d+\\.\\d)(?=\\%): Recoge decimales, porcentajes pero elimina el símbolo %.

```{r}
library(stringr)
# En este caso, le estamos pidiendo que nos traiga cada numero
# código: data$URBANIZATION = str_extract_all(string = urban$URBANIZATION ,pattern="\\d")
```

#### Para reemplazar caracteres (ejemlo: comas por puntos)

```{r}
#mydata$IDE = gsub(',',".",mydata$IDE)
#mydata$IDE = as.numeric(mydata$IDE) para cambiar a variable numérica/factor
#str(mydata) para verificar que la variable cambió
```

#### Eliminar columnas

```{r}
#dataMov = dataMov[,c(2:6)]
#dataMov = dataMov[-c(1:5,1880:1883),]
```

**Otras:**

```{r}
library(dplyr)
```

#### select()

Select nos permite seleccionar columnas

```{r}
#data = select(nombre de la data, MES_DESEMBOLSO, MONEDA)
#select(base, -MONEDA) para seleccionar todas, menos algunas
#select(base, MES_DESEMBOLSO:TASA_DESEMBOLSO) selecciona rangos de columnas
```

#### filter()

Filtras filas

```{r}
#mydata = filter(mydata,TIPO=="Provincia")
```

#### Para borrar NA

```{r}
#mydata=mydata[complete.cases(mydata),]
```
