---
title: "Sesion 4"
author: 'Jefes de práctica: Alexander Benites, Chiara Zamora y Airám Bello'
date: "Ciclo 2023-2"
subtitle: 'Curso: POL304 - Estadística para el análisis político 2'
output:
  pdf_document: default
  html_document: default
---

```{r,echo=FALSE, out.width="30%",fig.align="center"}
knitr::include_graphics("logoPUCP.png") 
```

Para esta sesión, vamos a necesitar cargar de nuevo la base de urbanización.

Para quienes exportaron la base de datos, podemos cargarla usando el comando import

```{r}
library(rio)
data="https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/urban.xlsx"
urban=import(data)
```

# 1. Limpieza de datos

En esta sección, veremos otros caminos para separar los datos.

## 1.1. Parsers

Los interpretes pueden facilitar en algo, cuando se trate de un único número en la columna. El comando **parse_number** nos permite extraer valores númericos de un string.

```{r}
library(readr)
parse_number(x = "$139,100 32")
```

Pero sólo recupera el primer valor. Confirmando:

```{r}
parse_number(urban$URBANIZATION)
```

En ese sentido, podemos usarlo combinado con la estrategia separadora (la vimos la sesión pasada)

```{r}
library(stringr)
library(magrittr) # para %>%

urban$pop_urb3=(str_split(string = urban$URBANIZATION,
          pattern = 'rate of urbanization:',
          simplify = T)[,1])%>%parse_number()

urban$rate_urb3=str_split(string = urban$URBANIZATION,
          pattern = 'rate of urbanization:',
          simplify = T)[,2]%>%parse_number()
```

## 1.2. Usando el comando substr()

Otra función que nos permite extraer cadenas es **substr()**, cuya síntesis es:

substr("x", "star=", "stop=")

Donde x es un vector caracter o texto del que se desea extraer una subcadena. star indica el orden inicial, es decir, la posición inicial de la que se empezará a extraer. Por último, stop indica el orden final. El orden inicial y final viene expresado por números (de la clase integer - aunque funciona con numéricos).

Veamos un ejemplo, si deseamos extraer desde el tercer al sexto caracter del vector x. La sintaxis sería la siguiente:

```{r}
x= "$139,100"
substr(x,start=2,stop=4)
```

### gsub()

También es importante la función gsub, que busca un character y lo reemplaza:

```{r}
porcentajes=c('13%','33%','55%')
gsub('%',"",porcentajes) # lo reemplaza por nada ''.
```

En el caso anterior

```{r}
gsub(',|\\$|\\?',"Alex","$139,100?")
```

### str_pad()

Agregamos elementos hasta un número específico de caracteres:

```{r}
#A la derecha:
stringr::str_pad("$139100", 10, side = "right", pad = 0)
```

```{r}
#A la izquierda
stringr::str_pad("$139100", 10, side = "left", pad = 0)
```

# **EJERCICIO**.

Como parte de un proyecto que analiza los procesos de movilidad interna en el país, le piden obtener la tasa de movilidad a nivel distrital, que hace referencia a:

Número de personas que NO vivían en ese distrito hace 5 años / Número total de personas censadas en el distrito

Para ello, puede recurrir a las bases de datos del censo, que se encuentran en el REDATAM del INEI. En ese sentido, debe realizar lo siguiente:

-   Elimine filas y columnas innecesarias
-   Separe regiones, provincias y departamentos
-   Corrija inconsistencia en los ubigeos (algunos casos no están arrancando en 0 cuando deberían)
-   Formatee sus variables
-   Extraiga la tasa de movilidad distrital

La base de datos debe verse de la siguiente manera:

```{r,echo=FALSE, out.width="80%",fig.align="center"}
knitr::include_graphics("base3.png") 
```

```{r}
dataMov = import("https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/reporte-3.xlsX")
```

Eliminando columnas innecesarias:

```{r}
dataMov = dataMov[,c(2:6)]
dataMov = dataMov[-c(1:5,1880:1883),]
```

Nombres a las columnas:

```{r}
colnames(dataMov) = c("UBIGEO","UBI","NO_NAC","SI_VIV","NO_VIV")
```

Nos quedamos con el distrito:

```{r}
dataMov$DISTRITO=str_split(dataMov$UBI,'distrito: ',simplify = T) [,2]
dataMov$UBI=str_split(dataMov$UBI,'distrito: ',simplify = T) [,1]
```

```{r}
dataMov$REGION=str_split(dataMov$UBI,', ',simplify = T)[,1]
dataMov$PROVINCIA=str_split(dataMov$UBI,', ',simplify = T)[,2]
```

Agregamos el 0 a los UBIGEOS:

```{r}
dataMov$UBIGEO=stringr::str_pad(dataMov$UBIGEO, 6, side = "left", pad = 0)
```

Reordenando:

```{r}
dataMov = dataMov[,c(1,7,8,6,3,4,5)]
dataMov[,5:7]=lapply(dataMov[,5:7], as.numeric)
str(dataMov)
```

Total de la población censada por distrito:

```{r}
dataMov$TOTAL_POB = dataMov$NO_NAC+dataMov$SI_VIV+dataMov$NO_VIV
dataMov$TASA_MOV = dataMov$NO_VIV/dataMov$TOTAL_POB
```

Ahora, si quisieramos los UBIGEOS de región y provincia, podríamos hacer esto:

```{r}
dataMov$UBIGEO_REG = substr(dataMov$UBIGEO,1,2)
```

Agregamos los cero con stringr:

```{r}
dataMov$UBIGEO_REG=stringr::str_pad(dataMov$UBIGEO_REG, 6, side = "right", pad = 0)
```

Lo mismo para las provincias:

```{r}
dataMov$UBIGEO_PROV = substr(dataMov$UBIGEO,1,4)
dataMov$UBIGEO_PROV=stringr::str_pad(dataMov$UBIGEO_PROV, 6, side = "right", pad = 0)
```

## 2. Otras funciones

### dplyr()

Uno de los paquetes que más funciona para manipular datos de forma fácil es dplyr. Este paquete tiene, entre otras, cinco funciones para manipular datos: **select()** **filter()** **arrange()** **mutate()** **summarize()**

```{r,echo=FALSE, out.width="40%"}
knitr::include_graphics("dplyr.jpg") 
```

```{r}
data="https://github.com/WendyAdrianzenRossi/Statistics/raw/main/Data_sample.xlsx"
base=import(data)
```

Cargamos la librería:

```{r}
library(dplyr)
```

### select()

Select nos permite seleccionar columnas. La sintaxis sería: select(dataframe, col1, col2) conde col1, col2, se refiere a los nombres de las columnas que queramos seleccionar.

```{r,echo=FALSE, out.width="80%",fig.align="center"}
knitr::include_graphics("select.png") 
```

Por ejemplo supongamos que queremos seleccionar únicamente las columnas de mes de desembolso y el tipo de moneda:

```{r eval=FALSE}
select(base, MES_DESEMBOLSO, MONEDA)
```

También podemos seleccionar todas las columnas menos algunas, esto lo hacemos poniendo - antes del nombre de la columna que no queremos seleccionar. Por ejemplo, si queremos todas las columnas menos el tipo de moneda

```{r eval=FALSE}
select(base, -MONEDA)
```

Si queremos seleccionar un rango de columnas por ejemplo de mes de desembolso a tasa de desembolso usamos :

```{r eval=FALSE}
select(base, MES_DESEMBOLSO:TASA_DESEMBOLSO)
```

Si queremos guardar el resultado de esa función en un nuevo objeto, debemos asignarlo con \<-. Por ejemplo guardemos en un objeto el rango de columnas que acabamos de seleccionar

```{r}
datos <- select(base, MES_DESEMBOLSO:TASA_DESEMBOLSO)
head(datos,10)
```

### filter()

La función filter nos permite filtrar filas:

```{r,echo=FALSE,out.width="80%",fig.align="center"}
knitr::include_graphics("filter.png") 
```

La sintaxis es simple: **filter(base, condicion)**. Donde condición es la condión lógica por la que queremos filtrar datos. Para ello usamos operadores lógicos:

-   *\>* mayor que
-   *\<* menor que
-   *\>=* mayor o igual que
-   *\<=* menor o igual que
-   *==* igual que (se ponen dos signos de igual)
-   *!=* diferente
-   *&* y
-   *\|* o
-   *is.na(variable)* filtra los valores en blanco de la variable seleccionada.
-   *!is.na(variable)* filtra los valores que no están en blanco de la variable.

Por ejemplo si queremos filtrar solamente los desembolsos superiores a un millón:

```{r eval=FALSE}
filter(base, MONTO_DESEMBOLSO>1000000)
```

O solamente los desembolsos superiores a un millón y que el tipo de moneda sea dólares:

```{r}
filter(base, MONTO_DESEMBOLSO>1000000 & MONEDA=="Dólares")
```

Ahora, si queremos filtrar la base por todos los registros que no tengan valores vacíos en el monto de desembolso:

```{r}
base<- filter(base, !is.na(MONTO_DESEMBOLSO))
sum(is.na(base$MONTO_DESEMBOLSO))
```

### mutate()

Mutate nos permite crear nuevas columnas de forma fácil.

Podemos crear una variable que me diga cuánto es el monto de desembolso por la tasa de desembolso:

```{r}
base <- mutate(base, montoxtasa=MONTO_DESEMBOLSO*TASA_DESEMBOLSO)
```

Ahora podemos crear una nueva variable que me categorice los datos en si son mayores a la media o no. Esto podemos hacerlo con la función if_else() o ifelse (funcionan igual). La sintaxis es: ifelse(condición, valor cierto, valor falso). (Es similar a la función if en Excel).

```{r}
base <- mutate(base, categoria=ifelse(montoxtasa<28473.43,"menor", "mayor"))
table(base$categoria)
```

Con mutate podemos crear multiples variables a la vez, separando cada una por coma, por ejemplo:

```{r}
base <- mutate(base, montoxtasa=MONTO_DESEMBOLSO*TASA_DESEMBOLSO,
                     categoria=ifelse(montoxtasa<28473.43,"menor", "mayor"))
```

### arrange()

Arrange nos permite ordenar las base por una o varias columnas Por ejemplo, queremos ordenar la base en orden ascendente por monto de desembolso y por monto por tasa:

```{r}
base <- arrange(base, MONTO_DESEMBOLSO, montoxtasa)
```

```{r}
base <- arrange(base, desc(MONTO_DESEMBOLSO), desc(montoxtasa))
```

## 1.3 Merge

Este proceso combina data frames con difente información, siempre que tengan un campo común (key), y este no se repita en ninguna otra columna.

```{r}
data="https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/corruption.csv"
corru=import(data)

data2="https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/demo.csv"
demo=import(data2)
```

Estos dos data frames deben tener un campo (columa) en común que sirva de "key":

```{r}
names(corru)
names(demo)
```

El merge producirá una tabla integrando las columnas que correspondan a cada key. Vea que la columna rank está presente en las tres pero no es la key; como el ranking se puede calcular si se necesitase, eliminemos los de cada data frame:

```{r}
# eliminando
corru$Rank=NULL
demo$Rank=NULL

#La columna Score de la tabla democ podriamos cambiar para no olvidar qué representa:

colnames(demo)[2]='ScoreDemo'

#Hay una column Region en las dos bases, quedémonos con la de democracia:
corru$Region=NULL
```

```{r,echo=FALSE, out.width="80%",fig.align="center"}
knitr::include_graphics("merge.png") 
```

Con estas bases de datos, vamos a explorar los escenarios de merge que podemos aplicar. Ten en cuenta que el método principal de la función merge es para data frames. Sin embargo, merge es una función genérica que también se puede usar con otros objetos (como vectores o matrices), pero serán transformados a la clase data.frame

### Inner join

Un inner join (en realidad un natural join), es la unión de conjuntos de datos más habitual que se puede realizar. Consiste en fusionar dos data frames en uno que contenga los elementos comunes de ambos. Para fusionar o unir los dos conjuntos de datos de muestra, solo tienes que pasarlos a la función merge, sin la necesidad de cambiar otros argumentos, debido a que, de manera predeterminada, la función combina los conjuntos de datos por los nombres de las columnas comunes.

```{r}
corrgdp=merge(corru,demo)
str(corrgdp)
```

El resultado es un data frame que contiene las observaciones que están presentes en ambos data frames, las que no, no están presentes en la salida resultante.

### Outer join

El outer join, o unión completa, combina todas las columnas de ambos conjuntos de datos en uno para todos los elemento. Para crear el full outer join de dos data frames en R tienes que establecer el argumento all como TRUE.

```{r}
corrgdp2=merge(corru,demo,all=TRUE)
str(corrgdp2)
```

Ahora tenemos un data frame con todos los casos. Como no todas las filas en el primer data frame coinciden con todas las filas en el segundo, en la salida aparecen valores NA en esos casos.

### Left join

El left join en R consiste en unir todas las filas del primer data frame con los valores correspondientes del segundo.Para crear la unión, tienes que establecer all.x = TRUE.

```{r}
corrgdp3=merge(corru,demo,all.x = TRUE)
str(corrgdp3)
```

Ahora tenemos un data frame con todos los casos de la primera base de datos (177 casos). Si esta contiene observaciones que no están en la segunda base de datos, tendra NA como valores en las variables que correspondan.

### Right join

El right join en R es lo opuesto al left outer join. En este caso, la combinación consiste en unir todas las filas del segundo data frame con las correspondientes en el primero.En consecuencia, necesitarás establecer el argumento all.y como TRUE para unir los data frames de esta manera.

```{r}
corrgdp4=merge(corru,demo,all.y = TRUE)
str(corrgdp4)
```

Ahora tenemos un data frame con todos los casos de la segunda base de datos (228 casos). Si esta contiene observaciones que no están en la segunda base de datos, tendra NA como valores en las variables que correspondan.

### Cross join

El cross join o unión cruzada, realiza el producto cartesiano de los conjuntos de datos. Puedes crear un cross join en R estableciendo como NULL el argumento by de la función merge.

```{r}
corrgdp5=merge(corru,demo,by=NULL)
str(corrgdp5)
```

Estas operaciones también las podemos hacer con Dplyr, la cual hemos utilizado anteriormente.

```{r}
library(dplyr)
data_resultado1=left_join(corru,demo,by="Country") #left_join Prioriza las filas de la primera base de datos
head(data_resultado1)
data_resultado2=right_join(corru,demo,by="Country") #right_join Prioriza las filas de la segunda base de datos.
head(data_resultado2)
data_resultado3=inner_join(corru,demo,by="Country") #inner_join Prioriza las filas que COINCIDEN en ambas fillas base de
head(data_resultado3)
data_resultado4=full_join(corru,demo,by="Country") #full_join PPrioriza las filas que están en ambas fillas base de datos
head(data_resultado4)
```

EJERCICIO 2:

Extraiga la tabla de los volcanes más altos del planeta del siguiente link: <https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/data_ex4.xlsx>

Le solicitan crear un código de limpieza para ordenar esa base de datos, sobre la cual se irán añadiendo casos en el futuro. El objetivo es utilizar la técnica de limpieza de su preferencia para separar los pies de altura, grados, minutos y segundos de cada una de las coordenadas de cada volcán. Luego de ello, eliminar las variables innecesarias y quedarse con una data limpia. La base debe verse así:

```{r,echo=FALSE, out.width="80%",fig.align="center"}
knitr::include_graphics("base1.png") 
```

### Ejercicio:

```{r}
data="https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/data_ex4.xlsx"
ejercicio=import(data)
```

```{r}
names(ejercicio)
```

```{r}
ejercicio2 <- select(ejercicio, Nombre, País, 'Altura (m s. n. m.)', Coordenadas)
head(ejercicio2, 10)
```

```{r}
ejercicio2 <- mutate(ejercicio2, Pies=substr(ejercicio2$`Altura (m s. n. m.)`,start=7,stop=12))
```

```{r}
ejercicio2$`Altura (m s. n. m.)`=NULL
```

```{r}
ejercicio2 <- mutate(ejercicio2, GLA=substr(ejercicio2$Coordenadas,start=1,stop=2))
```

```{r}
ejercicio2 <- mutate(ejercicio2, MLA=substr(ejercicio2$Coordenadas,start=4,stop=5))
```

```{r}
str_split(ejercicio2$Coordenadas, , simplify = T)
```
